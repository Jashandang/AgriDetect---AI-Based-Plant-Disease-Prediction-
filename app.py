# ===============================================================
# ЁЯМ┐ Plant Disease Detection Dashboard (Colab-ready)
# Choose: Fusion (ResNet18 + EfficientNetB0)  OR  ResNet-50
# EN / HI / PA recommendations for 15 classes
# ===============================================================

import streamlit as st
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image
import json, os, time
import numpy as np

# ---------------- CONFIG ----------------
st.set_page_config(page_title="ЁЯМ┐ Plant Disease Detector",
                   page_icon="ЁЯМ┐", layout="centered")

DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
IMG_SIZE = 224

# speed tweaks
if DEVICE == "cuda":
    torch.backends.cudnn.benchmark = True
else:
    try:
        torch.set_num_threads(2)
        torch.set_num_interop_threads(2)
    except Exception:
        pass

# === Update these paths if needed (use exact filenames in /content) ===
RESNET18_PATH     = "/content/plant_disease_resnet18_best.pth"            # backbone for Fusion
EFFICIENTNET_PATH = "/content/plant_disease_efficientnet_b0_best.pth"      # backbone for Fusion
FUSION_MODEL_PATH = "/content/plant_disease_fusion_best.pth"           # Fusion head (change if your file has no (1))
RESNET50_PATH     = "/content/plant_disease_resnet50_best.pth"             # standalone ResNet-50
CLASS_NAMES_PATH  = "/content/class_names.json"                             # same list used in training


# ---------------- SOLUTIONS (EN/HI/PA) ----------------
SOLUTIONS = {
    "Pepper__bell___Bacterial_spot": {
        "en": """**Bacterial Spot (Pepper) тАФ Actions**
- Remove & destroy infected leaves/fruits.
- Spray copper-based bactericide as per label.
- Avoid working in wet foliage.

**Prevent:** disease-free seed/transplants, base irrigation, spacing & crop rotation.""",
        "hi": """**рдмреИрдХреНрдЯреЗрд░рд┐рдпрд▓ рд╕реНрдкреЙрдЯ (рд╢рд┐рдорд▓рд╛ рдорд┐рд░реНрдЪ) тАФ рдЙрдкрд╛рдп**
- рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддреЗ/рдлрд▓ рд╣рдЯрд╛рдХрд░ рдирд╖реНрдЯ рдХрд░реЗрдВред
- рд▓реЗрдмрд▓ рдЕрдиреБрд╕рд╛рд░ рдХреЙрдкрд░ рдЖрдзрд╛рд░рд┐рдд рдмреИрдХреНрдЯреАрд░рд┐рд╕рд╛рдЗрдб рд╕реНрдкреНрд░реЗ рдХрд░реЗрдВред
- рдЧреАрд▓реЗ рдкрддреНрддреЛрдВ рдореЗрдВ рдХрд╛рдо рди рдХрд░реЗрдВред

**рд░реЛрдХрдерд╛рдо:** рд░реЛрдЧ-рдореБрдХреНрдд рдмреАрдЬ/рдирд░реНрд╕рд░реА, рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ, рджреВрд░реА рд░рдЦреЗрдВ, рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдБред""",
        "pa": """**римрйИриХриЯрйАри░рйАриЕри▓ ри╕рикрйМриЯ (ри╕ри╝ри┐риори▓ри╛ риори┐ри░риЪ) тАФ ри╣рй▒ри▓**
- ри╕рй░риХрйНри░риори┐рид рикрй▒ридрйЗ/рилри▓ ри╣риЯри╛ риХрйЗ риири╕ри╝риЯ риХри░рйЛред
- ри▓рйЗримри▓ риорйБридри╛римриХ ридри╛риВримрйЗ-риЖризри╛ри░ри┐рид ри╕рикри░рйЗ риХри░рйЛред
- риЧри┐рй▒ри▓рйЗ рикрй▒ридри┐риЖриВ 'ридрйЗ риХрй░рио риири╛ риХри░рйЛред

**ри░рйЛриХриери╛рио:** ри░рйЛриЧ-ри░ри╣ри┐рид римрйАриЬ/риЯрйНри░ри╛риВри╕рикри▓ри╛риВриЯ, римрйЗри╕ ри╕ри┐рй░риЪри╛риИ, рилри╛ри╕ри▓ри╛, рилри╕ри▓ риШрйБриори╛ри╡ред"""
    },
    "Pepper__bell___healthy": {
        "en": "Healthy pepper тАФ no treatment needed. Prevent with scouting, balanced fertilization, base irrigation & rotation.",
        "hi": "рд╕реНрд╡рд╕реНрде рд╢рд┐рдорд▓рд╛ рдорд┐рд░реНрдЪ тАФ рдЙрдкрдЪрд╛рд░ рдЖрд╡рд╢реНрдпрдХ рдирд╣реАрдВред рдирд┐рд░реАрдХреНрд╖рдг, рд╕рдВрддреБрд▓рд┐рдд рдЦрд╛рдж, рдЖрдзрд╛рд░ рд╕рд┐рдВрдЪрд╛рдИ рд╡ рдлрд╕рд▓ рдЪрдХреНрд░ рд░рдЦреЗрдВред",
        "pa": "ри╕ри┐ри╣ридриорй░риж ри╕ри╝ри┐риори▓ри╛ риори┐ри░риЪ тАФ риЗри▓ри╛риЬ ри▓рйЛрйЬрйАриВрижри╛ риири╣рйАриВред риири┐риприорид риЬри╛риВриЪ, ри╕рй░ридрйБри▓ри┐рид риЦри╛риж, римрйЗри╕ ри╕ри┐рй░риЪри╛риИ риЕридрйЗ рилри╕ри▓ риШрйБриори╛ри╡ред"
    },
    "Potato___Early_blight": {
        "en": """**Early Blight (Potato) тАФ Actions**
- Remove infected leaves.
- Fungicide: chlorothalonil / mancozeb (per label).
- Mulch to reduce soil splash.

**Prevent:** avoid overhead irrigation; rotate; use resistant varieties.""",
        "hi": """**рдЕрд░реНрд▓реА рдмреНрд▓рд╛рдЗрдЯ (рдЖрд▓реВ) тАФ рдЙрдкрд╛рдп**
- рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддреЗ рд╣рдЯрд╛рдПрдБред
- рдХреНрд▓реЛрд░реЛрдереИрд▓реЛрдирд┐рд▓/рдореИрдирдХреЛрдЬреЗрдм рдлрдлреВрдВрджрдирд╛рд╢рдХ (рд▓реЗрдмрд▓ рдЕрдиреБрд╕рд╛рд░)ред
- рдорд▓реНрдЪ рдбрд╛рд▓реЗрдВ рддрд╛рдХрд┐ рдЫреАрдВрдЯреЗ рдХрдо рд╣реЛрдВред

**рд░реЛрдХрдерд╛рдо:** рдКрдкрд░ рд╕реЗ рд╕рд┐рдВрдЪрд╛рдИ рд╕реЗ рдмрдЪреЗрдВ, рдлрд╕рд▓ рдЪрдХреНрд░, рдкреНрд░рддрд┐рд░реЛрдзреА рдХрд┐рд╕реНрдореЗрдВред""",
        "pa": """**риЕри░ри▓рйА римри▓ри╛риИриЯ (риЖри▓рйВ) тАФ ри╣рй▒ри▓**
- ри╕рй░риХрйНри░риори┐рид рикрй▒ридрйЗ ри╣риЯри╛риУред
- риХри▓рйЛри░рйЛриерйИри▓рйЛриири┐ри▓/риорйИриириХрйЛриЬри╝рйЗрим рилрй░риЧрйАри╕ри╛риИриб (ри▓рйЗримри▓ риорйБридри╛римриХ)ред
- риори▓риЪ риири╛ри▓ риЫри┐риЯриХриг риШриЯри╛риУред

**ри░рйЛриХриери╛рио:** риУри╡ри░ри╣рйИрй▒риб ри╕ри┐рй░риЪри╛риИ ридрйЛриВ римриЪрйЛ, рилри╕ри▓ риШрйБриори╛ри╡, ри░рйЛризриХ риХри┐ри╕риори╛риВред"""
    },
    "Potato___Late_blight": {
        "en": """**Late Blight (Potato) тАФ Actions**
- Uproot & destroy infected plants.
- Copper-based fungicides per local guidelines.
- Ensure drainage.

**Prevent:** avoid overhead irrigation; certified seed; rotation.""",
        "hi": """**рд▓реЗрдЯ рдмреНрд▓рд╛рдЗрдЯ (рдЖрд▓реВ) тАФ рдЙрдкрд╛рдп**
- рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЗ рдЙрдЦрд╛рдбрд╝рдХрд░ рдирд╖реНрдЯ рдХрд░реЗрдВред
- рд╕реНрдерд╛рдиреАрдп рджрд┐рд╢рд╛-рдирд┐рд░реНрджреЗрд╢ рдЕрдиреБрд╕рд╛рд░ рдХреЙрдкрд░ рдлрдлреВрдВрджрдирд╛рд╢рдХред
- рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдареАрдХ рд░рдЦреЗрдВред

**рд░реЛрдХрдерд╛рдо:** рдКрдкрд░ рд╕реЗ рд╕рд┐рдВрдЪрд╛рдИ рди рдХрд░реЗрдВ; рдкреНрд░рдорд╛рдгрд┐рдд рдмреАрдЬ; рдлрд╕рд▓ рдЪрдХреНрд░ред""",
        "pa": """**ри▓рйЗриЯ римри▓ри╛риИриЯ (риЖри▓рйВ) тАФ ри╣рй▒ри▓**
- ри╕рй░риХрйНри░риори┐рид рикрйМрижрйЗ ри╣риЯри╛ риХрйЗ риири╕ри╝риЯ риХри░рйЛред
- ри╕риери╛риириХ рижри┐ри╢ри╛-риири┐ри░рижрйЗри╕ри╝ риЕриирйБри╕ри╛ри░ ридри╛риВримрйЗ ри╡ри╛ри▓рйЗ рилрй░риЧрйАри╕ри╛риИрибред
- рибри░рйЗриирйЗриЬ риприХрйАриирйА римригри╛риУред

**ри░рйЛриХриери╛рио:** риУри╡ри░ри╣рйИрй▒риб ри╕ри┐рй░риЪри╛риИ ридрйЛриВ римриЪрйЛ; ри╕ри░риЯрйАрилри╛риЗриб римрйАриЬ; рилри╕ри▓ риШрйБриори╛ри╡ред"""
    },
    "Potato___healthy": {
        "en": "Healthy potato тАФ no treatment. Prevent with rotation, certified seed, good drainage, balanced nutrition.",
        "hi": "рд╕реНрд╡рд╕реНрде рдЖрд▓реВ тАФ рдЙрдкрдЪрд╛рд░ рдирд╣реАрдВред рд░реЛрдХрдерд╛рдо: рдлрд╕рд▓ рдЪрдХреНрд░, рдкреНрд░рдорд╛рдгрд┐рдд рдмреАрдЬ, рдЬрд▓ рдирд┐рдХрд╛рд╕реА, рд╕рдВрддреБрд▓рд┐рдд рдкреЛрд╖рдгред",
        "pa": "ри╕ри┐ри╣ридриорй░риж риЖри▓рйВ тАФ риЗри▓ри╛риЬ риири╣рйАриВред ри░рйЛриХриери╛рио: рилри╕ри▓ риШрйБриори╛ри╡, ри╕ри░риЯрйАрилри╛риЗриб римрйАриЬ, рибри░рйЗриирйЗриЬ, ри╕рй░ридрйБри▓ри┐рид рикрйЛри╕ри╝ригред"
    },
    "Tomato_Bacterial_spot": {
        "en": """**Bacterial Spot (Tomato) тАФ Actions**
- Remove infected leaves; prune for airflow.
- Copper sprays as recommended.
- Sanitize tools.

**Prevent:** disease-free transplants; avoid overhead irrigation.""",
        "hi": """**рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд╕реНрдкреЙрдЯ (рдЯрдорд╛рдЯрд░) тАФ рдЙрдкрд╛рдп**
- рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддреЗ рд╣рдЯрд╛рдПрдБ; рд╣рд╡рд╛ рдХреЗ рд▓рд┐рдП рдЫрдВрдЯрд╛рдИ рдХрд░реЗрдВред
- рдЕрдиреБрд╢рдВрд╕рд┐рдд рдХреЙрдкрд░ рд╕реНрдкреНрд░реЗред
- рдФрдЬрд╝рд╛рд░реЛрдВ рдХреА рд╕рдлрд╛рдИ рд░рдЦреЗрдВред

**рд░реЛрдХрдерд╛рдо:** рд░реЛрдЧ-рд░рд╣рд┐рдд рдкреМрдз; рдКрдкрд░ рд╕реЗ рд╕рд┐рдВрдЪрд╛рдИ рди рдХрд░реЗрдВред""",
        "pa": """**римрйИриХриЯрйАри░рйАриЕри▓ ри╕рикрйМриЯ (риЯриори╛риЯри░) тАФ ри╣рй▒ри▓**
- ри╕рй░риХрйНри░риори┐рид рикрй▒ридрйЗ ри╣риЯри╛риУ; ри╣ри╡ри╛ ри▓риИ рикрйНри░рйВрии риХри░рйЛред
- ридри╛риоримрйЗ рижрйЗ ри╕рикри░рйЗред
- ри╕рй░риж ри╕рйИриирйАриЯри╛риИриЬри╝ риХри░рйЛред

**ри░рйЛриХриери╛рио:** ри░рйЛриЧ-ри░ри╣ри┐рид рикрйМрижрйЗ; риУри╡ри░ри╣рйИрй▒риб ри╕ри┐рй░риЪри╛риИ ридрйЛриВ римриЪрйЛред"""
    },
    "Tomato_Early_blight": {
        "en": "Remove infected parts; spray chlorothalonil/mancozeb; mulch; rotate crops.",
        "hi": "рд╕рдВрдХреНрд░рдорд┐рдд рд╣рд┐рд╕реНрд╕реЗ рд╣рдЯрд╛рдПрдБ; рдХреНрд▓реЛрд░реЛрдереИрд▓реЛрдирд┐рд▓/рдореИрдирдХреЛрдЬреЗрдм рд╕реНрдкреНрд░реЗ; рдорд▓реНрдЪ; рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдБред",
        "pa": "ри╕рй░риХрйНри░риори┐рид ри╣ри┐рй▒ри╕рйЗ ри╣риЯри╛риУ; риХри▓рйЛри░рйЛриерйИри▓рйЛриири┐ри▓/риорйИриириХрйЛриЬри╝рйЗрим; риори▓риЪ; рилри╕ри▓ римрижри▓рйЛред"
    },
    "Tomato_Late_blight": {
        "en": "Remove infected plants; copper fungicides; good drainage; avoid overhead irrigation.",
        "hi": "рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЗ рд╣рдЯрд╛ рджреЗрдВ; рдХреЙрдкрд░ рдлрдлреВрдВрджрдирд╛рд╢рдХ; рдЕрдЪреНрдЫреА рдирд┐рдХрд╛рд╕реА; рдКрдкрд░ рд╕реЗ рд╕рд┐рдВрдЪрд╛рдИ рди рдХрд░реЗрдВред",
        "pa": "ри╕рй░риХрйНри░риори┐рид рикрйМрижрйЗ ри╣риЯри╛риУ; ридри╛риВримрйЗ ри╡ри╛ри▓рйЗ рилрй░риЧрйАри╕ри╛риИриб; риЪрй░риЧрйА рибри░рйЗриирйЗриЬ; риУри╡ри░ри╣рйИрй▒риб ри╕ри┐рй░риЪри╛риИ ридрйЛриВ римриЪрйЛред"
    },
    "Tomato_Leaf_Mold": {
        "en": "Improve airflow; remove lower leaves; recommended fungicide; avoid high humidity irrigation.",
        "hi": "рд╣рд╡рд╛ рдХрд╛ рдкреНрд░рд╡рд╛рд╣ рдмрдврд╝рд╛рдПрдБ; рдирд┐рдЪрд▓реЗ рдкрддреНрддреЗ рд╣рдЯрд╛рдПрдБ; рдЕрдиреБрд╢рдВрд╕рд┐рдд рдлрдлреВрдВрджрдирд╛рд╢рдХ; рдЕрдзрд┐рдХ рдЖрд░реНрджреНрд░ рд╕рд┐рдВрдЪрд╛рдИ рд╕реЗ рдмрдЪреЗрдВред",
        "pa": "ри╣ри╡ри╛рижри╛ри░рйА ри╡ризри╛риУ; ри╣рйЗриари▓рйЗ рикрй▒ридрйЗ ри╣риЯри╛риУ; рилрй░риЧрйАри╕ри╛риИриб; риириорйА ри╡ри╛ри▓рйА риУри╡ри░ри╣рйИрй▒риб ри╕ри┐рй░риЪри╛риИ ридрйЛриВ римриЪрйЛред"
    },
    "Tomato_Septoria_leaf_spot": {
        "en": "Remove infected leaves; apply suitable fungicide; mulch; avoid splash irrigation.",
        "hi": "рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддреЗ рд╣рдЯрд╛рдПрдБ; рдЙрдЪрд┐рдд рдлрдлреВрдВрджрдирд╛рд╢рдХ; рдорд▓реНрдЪ; рдЫреАрдВрдЯреЗ рд╡рд╛рд▓реА рд╕рд┐рдВрдЪрд╛рдИ рд╕реЗ рдмрдЪреЗрдВред",
        "pa": "ри╕рй░риХрйНри░риори┐рид рикрй▒ридрйЗ ри╣риЯри╛риУ; риврйБрй▒риХри╡ри╛риВ рилрй░риЧрйАри╕ри╛риИриб; риори▓риЪ; риЫри┐рибриХри╛риЕ ридрйЛриВ римриЪрйЛред"
    },
    "Tomato_Spider_mites_Two_spotted_spider_mite": {
        "en": "Spray water to dislodge; use miticides if severe; encourage predators (ladybugs); reduce water-stress.",
        "hi": "рдкрд╛рдиреА рдХрд╛ рд╕реНрдкреНрд░реЗ рдХрд░реЗрдВ; рдЧрдВрднреАрд░ рд╣реЛрдиреЗ рдкрд░ рдорд╛рдЗрдЯрд┐рд╕рд╛рдЗрдб; рд▓реЗрдбреАрдмрдЧ рдЬреИрд╕реЗ рд╢рд┐рдХрд╛рд░рд┐рдпреЛрдВ рдХреЛ рдмрдврд╝рд╛рд╡рд╛ рджреЗрдВ; рдЬрд▓-рддрдирд╛рд╡ рдХрдо рдХрд░реЗрдВред",
        "pa": "рикри╛ригрйА рижри╛ ри╕рикри░рйЗ; риЧрй░ринрйАри░ ри╣рйЛриг 'ридрйЗ риори╛риИриЯри┐ри╕ри╛риИриб; ри▓рйЗрибрйАримрй▒риЧ ри╡ри░риЧрйЗ ри╢ри┐риХри╛ри░рйА; рикри╛ригрйА-ридригри╛риЕ риШриЯри╛риУред"
    },
    "Tomato__Target_Spot": {
        "en": "Remove infected tissue; rotate fungicides; avoid long leaf wetness; crop rotation.",
        "hi": "рд╕рдВрдХреНрд░рдорд┐рдд рдКрддрдХ рд╣рдЯрд╛рдПрдБ; рдлрдлреВрдВрджрдирд╛рд╢рдХреЛрдВ рдХрд╛ рдкрд░рд┐рд╡рд░реНрддрди; рдкрддреНрддреЛрдВ рдХреЛ рд▓рдВрдмреЗ рд╕рдордп рддрдХ рдЧреАрд▓рд╛ рди рд░рдЦреЗрдВ; рдлрд╕рд▓ рдЪрдХреНрд░ред",
        "pa": "ри╕рй░риХрйНри░риори┐рид ри╣ри┐рй▒ри╕рйЗ ри╣риЯри╛риУ; рилрй░риЧрйАри╕ри╛риИриб риШрйБриори╛риУ; ри▓рй░римрйА риириорйА ридрйЛриВ римриЪрйЛ; рилри╕ри▓ риШрйБриори╛ри╡ред"
    },
    "Tomato__Tomato_YellowLeaf__Curl_Virus": {
        "en": "Remove infected plants; control whiteflies (insecticidal soap/Neem/reflective mulch); use resistant varieties.",
        "hi": "рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЗ рд╣рдЯрд╛рдПрдБ; рд╡реНрд╣рд╛рдЗрдЯрдлреНрд▓рд╛рдИ рдирд┐рдпрдВрддреНрд░рдг (рдЗрдиреНрд╕реЗрдХреНрдЯрд┐рд╕рд╛рдЗрдбрд▓ рд╕реЛрдк/рдиреАрдо/рд░рд┐рдлреНрд▓реЗрдХреНрдЯрд┐рд╡ рдорд▓реНрдЪ); рдкреНрд░рддрд┐рд░реЛрдзреА рдХрд┐рд╕реНрдореЗрдВ рдЕрдкрдирд╛рдПрдБред",
        "pa": "рикрйМрижрйЗ ри╣риЯри╛риУ; ри╡рйНри╣ри╛риИриЯрилри▓ри╛риИ риХрй░риЯри░рйЛри▓ (ри╕ри╛римриг/риирйАрио/ри░ри┐рилри▓рйИриХриЯри┐ри╡ риори▓риЪ); ри░рйЛризриХ риХри┐ри╕риори╛риВ ри╡ри░ридрйЛред"
    },
    "Tomato__Tomato_mosaic_virus": {
        "en": "Remove infected plants; sanitize tools; avoid tobacco near plants; use virus-free seedlings.",
        "hi": "рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЗ рд╣рдЯрд╛рдПрдБ; рдФрдЬрд╝рд╛рд░ рд╕рд╛рдл рд░рдЦреЗрдВ; рдкреМрдзреЛрдВ рдХреЗ рдкрд╛рд╕ рддрдореНрдмрд╛рдХреВ рд╕реЗ рдмрдЪреЗрдВ; рд╡рд╛рдпрд░рд╕-рд░рд╣рд┐рдд рдкреМрдз рд▓рдЧрд╛рдПрдБред",
        "pa": "рикрйМрижрйЗ ри╣риЯри╛риУ; ри╕рй░риж ри╕ри╛рил ри░рй▒риЦрйЛ; ридриори╛риХрйВ ридрйЛриВ римриЪрйЛ; ри╡ри╛риЗри░ри╕-рилрйНри░рйА рикрйМрижрйЗ ри▓риЧри╛риУред"
    },
    "Tomato_healthy": {
        "en": "Healthy tomato тАФ no treatment. Prevent with balanced nutrition, scouting, sanitation & proper irrigation.",
        "hi": "рд╕реНрд╡рд╕реНрде рдЯрдорд╛рдЯрд░ тАФ рдЙрдкрдЪрд╛рд░ рдирд╣реАрдВред рд░реЛрдХрдерд╛рдо: рд╕рдВрддреБрд▓рд┐рдд рдкреЛрд╖рдг, рдирд┐рд░реАрдХреНрд╖рдг, рд╕реНрд╡рдЪреНрдЫрддрд╛, рдЙрдЪрд┐рдд рд╕рд┐рдВрдЪрд╛рдИред",
        "pa": "ри╕ри┐ри╣ридриорй░риж риЯриори╛риЯри░ тАФ риЗри▓ри╛риЬ риири╣рйАриВред ри░рйЛриХриери╛рио: ри╕рй░ридрйБри▓ри┐рид риЦрйБри░ри╛риХ, риЬри╛риВриЪ, ри╕рилри╛риИ, риарйАриХ ри╕ри┐рй░риЪри╛риИред"
    }
}
# ---------------- END SOLUTIONS ----------------


# ---------------- MODEL CLASSES & LOADERS ----------------
class FusionNet(nn.Module):
    def __init__(self, resnet_dim: int, effnet_dim: int, num_classes: int):
        super().__init__()
        self.fc1 = nn.Linear(resnet_dim + effnet_dim, 512)
        self.bn1 = nn.BatchNorm1d(512)
        self.dropout1 = nn.Dropout(0.4)
        self.fc2 = nn.Linear(512, 128)
        self.bn2 = nn.BatchNorm1d(128)
        self.dropout2 = nn.Dropout(0.3)
        self.fc3 = nn.Linear(128, num_classes)
        self.relu = nn.ReLU()

    def forward(self, x_res, x_eff):
        x = torch.cat((x_res, x_eff), dim=1)
        x = self.dropout1(self.relu(self.bn1(self.fc1(x))))
        x = self.dropout2(self.relu(self.bn2(self.fc2(x))))
        return self.fc3(x)


@st.cache_resource
def load_class_names():
    if not os.path.exists(CLASS_NAMES_PATH):
        raise FileNotFoundError(f"Missing {CLASS_NAMES_PATH}")
    with open(CLASS_NAMES_PATH, "r", encoding="utf-8") as f:
        return json.load(f)


@st.cache_resource
def load_fusion_models(class_names):
    needed = [RESNET18_PATH, EFFICIENTNET_PATH, FUSION_MODEL_PATH]
    if any(not os.path.exists(p) for p in needed):
        st.warning("Fusion unavailable: missing one or more files.")
        return None, None, None

    try:
        # ResNet-18 backbone
        res18 = models.resnet18(weights=models.ResNet18_Weights.DEFAULT)
        res18.fc = nn.Identity()
        res18.load_state_dict(torch.load(RESNET18_PATH, map_location=DEVICE), strict=False)
        res18.to(DEVICE).eval()

        # EfficientNet-B0 backbone
        effb0 = models.efficientnet_b0(weights=models.EfficientNet_B0_Weights.DEFAULT)
        effb0.classifier = nn.Identity()
        effb0.load_state_dict(torch.load(EFFICIENTNET_PATH, map_location=DEVICE), strict=False)
        effb0.to(DEVICE).eval()

        # Fusion head
        num_classes = len(class_names)
        fusion_head = FusionNet(512, 1280, num_classes)
        fusion_head.load_state_dict(torch.load(FUSION_MODEL_PATH, map_location=DEVICE), strict=True)
        fusion_head.to(DEVICE).eval()

        # Sanity check (optional)
        with torch.no_grad():
            dummy = torch.randn(1, 3, 224, 224).to(DEVICE)
            rf = res18(dummy); ef = effb0(dummy)
            if rf.dim() > 2: rf = torch.flatten(rf, 1)
            if ef.dim() > 2: ef = torch.flatten(ef, 1)
            _ = fusion_head(rf, ef)

        return res18, effb0, fusion_head

    except Exception as e:
        st.warning(f"Fusion unavailable: {e}")
        return None, None, None


@st.cache_resource
def load_resnet50_model(class_names):
    if not os.path.exists(RESNET50_PATH):
        st.warning("ResNet-50 weights not found; it will be unavailable.")
        return None
    try:
        num_classes = len(class_names)
        model = models.resnet50(weights=models.ResNet50_Weights.DEFAULT)
        in_f = model.fc.in_features
        model.fc = nn.Linear(in_f, num_classes)
        state = torch.load(RESNET50_PATH, map_location=DEVICE)
        try:
            model.load_state_dict(state, strict=True)
        except Exception:
            model.load_state_dict(state, strict=False)
        model.to(DEVICE).eval()
        return model
    except Exception as e:
        st.warning(f"ResNet-50 unavailable: {e}")
        return None


# ---------------- TRANSFORM ----------------
transform = transforms.Compose([
    transforms.Resize((IMG_SIZE, IMG_SIZE)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])


# ---------------- LOAD ALL ----------------
try:
    CLASS_NAMES = load_class_names()
except Exception as e:
    st.error("Failed to load class names.")
    st.exception(e)
    st.stop()

res18, effb0, fusion_head = load_fusion_models(CLASS_NAMES)
resnet50 = load_resnet50_model(CLASS_NAMES)

# Build available model options based on available files
model_options = []
if fusion_head is not None:
    model_options.append("Fusion (ResNet18 + EfficientNetB0)")
if resnet50 is not None:
    model_options.append("ResNet-50")

if not model_options:
    st.error("No models available. Check model paths at the top of app.py.")
    st.stop()


# ---------------- UI ----------------
st.title("ЁЯМ▒ Plant Disease Detection Dashboard")
st.caption(f"ЁЯЦея╕П Running on: **{DEVICE.upper()}**")
st.write("Upload a leaf image to identify the plant disease and get recommended actions in **English / Hindi / Punjabi**.")
st.divider()

model_choice = st.radio("Select model for prediction:", model_options, horizontal=True)

uploaded_file = st.file_uploader("Upload an image of a plant leaf ЁЯНГ", type=["jpg","jpeg","png"])
if uploaded_file:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, use_container_width=True, caption="Uploaded image")

    lang = st.selectbox("Choose language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ / ринри╛ри╢ри╛ риЪрйБригрйЛ", ["English","Hindi","Punjabi"])
    lang_map = {"English":"en","Hindi":"hi","Punjabi":"pa"}
    selected_lang = lang_map[lang]

    with st.spinner("Analyzing..."):
        x = transform(image).unsqueeze(0).to(DEVICE)
        t0 = time.time()
        with torch.no_grad():
            if model_choice.startswith("Fusion"):
                rf = res18(x)
                ef = effb0(x)
                if rf.dim() > 2: rf = torch.flatten(rf, 1)
                if ef.dim() > 2: ef = torch.flatten(ef, 1)
                logits = fusion_head(rf, ef)
            else:  # ResNet-50
                logits = resnet50(x)
        infer_ms = (time.time() - t0) * 1000.0

        probs = torch.softmax(logits, dim=1).cpu().numpy()[0]
        top_idx = int(probs.argmax())
        top3 = np.argsort(probs)[::-1][:3]

    st.markdown("### ЁЯМ┐ Prediction Results")
    st.caption(f"тП▒я╕П Inference time: {infer_ms:.1f} ms")
    st.markdown(f"**Predicted Class:** `{CLASS_NAMES[top_idx]}`")
    st.progress(float(probs[top_idx]))
    st.write(f"**Confidence:** {probs[top_idx]*100:.2f}%")

    st.markdown("### ЁЯФЭ Top-3 Predictions")
    for i in top3:
        st.write(f"- **{CLASS_NAMES[i]}** тАФ {probs[i]*100:.2f}%")

    # Solutions
    predicted_key = CLASS_NAMES[top_idx]
    sol_dict = SOLUTIONS.get(predicted_key, {})
    solution_text = sol_dict.get(selected_lang, None)

    st.markdown("### ЁЯй║ Recommended Actions / рдЙрдкрдЪрд╛рд░ / ри╕ри▓ри╛ри╣")
    if solution_text:
        st.markdown(solution_text)
    else:
        st.warning("Solution not found for this class/language. "
                   "If you changed class names, update the SOLUTIONS keys accordingly.")
        with st.expander("Debug: Expected keys vs Predicted"):
            st.write("Predicted key:", predicted_key)
            st.write("Have solutions for keys:", list(SOLUTIONS.keys()))

else:
    st.info("ЁЯСЖ Upload an image to get prediction and solutions (EN/HI/PA).")

# ---------------- Sidebar ----------------
st.sidebar.title("About")
about = []
if fusion_head is not None:
    about.append("тАв **Fusion** = ResNet-18 (features) + EfficientNet-B0 (features) тЖТ Fusion Head")
if resnet50 is not None:
    about.append("тАв **ResNet-50** = standalone classifier")
st.sidebar.write("\n".join(about))
st.sidebar.write("Ensure `.pth` files and `class_names.json` exist at the paths defined at the top.")
